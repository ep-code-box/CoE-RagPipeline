"""로컬 DB 수동 변경 사항 동기화

Revision ID: 18c18bf4111f
Revises: 
Create Date: 2025-09-04 14:52:02.450769

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '18c18bf4111f'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    if not inspector.has_table('vector_embeddings'):
        op.create_table('vector_embeddings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('source_type', sa.Enum('CODE', 'DOCUMENT', 'AST_NODE', name='sourcetype'), nullable=False),
        sa.Column('source_id', sa.Integer(), nullable=False),
        sa.Column('chunk_id', sa.String(length=100), nullable=False),
        sa.Column('collection_name', sa.String(length=255), nullable=False),
        sa.Column('embedding_model', sa.String(length=100), nullable=True),
        sa.Column('chunk_text', sa.Text(), nullable=True),
        sa.Column('node_metadata', sa.JSON(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id')
        )
        op.create_index(op.f('ix_vector_embeddings_id'), 'vector_embeddings', ['id'], unique=False)
    # 외래키 존재 시에만 드롭
    try:
        fk_list = sa.inspect(conn).get_foreign_keys('repository_analyses')
        if any(fk.get('name') == 'repository_analyses_ibfk_1' for fk in fk_list):
            op.drop_constraint('repository_analyses_ibfk_1', 'repository_analyses', type_='foreignkey')
    except Exception:
        # 검사 실패 또는 드롭 실패는 무시 (이후 재생성 단계 존재)
        pass
    op.alter_column('analysis_requests', 'analysis_id',
               existing_type=mysql.VARCHAR(length=255),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('analysis_requests', 'status',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='analysisstatus'),
               nullable=True)
    op.alter_column('analysis_requests', 'repositories',
               existing_type=mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'),
               nullable=False)
    op.alter_column('analysis_requests', 'include_ast',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('analysis_requests', 'include_tech_spec',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('analysis_requests', 'include_correlation',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=True)
    op.alter_column('analysis_requests', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    op.alter_column('analysis_requests', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=True)
    # 안전한 인덱스 드롭 (존재할 때만 드롭)
    conn = op.get_bind()
    try:
        # MariaDB 지원: DROP INDEX IF EXISTS ... ON ...
        conn.exec_driver_sql("DROP INDEX IF EXISTS analysis_id ON analysis_requests")
    except Exception:
        # 드롭 실패는 치명적이지 않으므로 무시
        pass
    # 인덱스 생성은 존재하지 않을 때만 수행
    idx_names = {idx['name'] for idx in sa.inspect(conn).get_indexes('analysis_requests')}
    if op.f('ix_analysis_requests_analysis_id') not in idx_names:
        op.create_index(op.f('ix_analysis_requests_analysis_id'), 'analysis_requests', ['analysis_id'], unique=True)
    if op.f('ix_analysis_requests_group_name') not in idx_names:
        op.create_index(op.f('ix_analysis_requests_group_name'), 'analysis_requests', ['group_name'], unique=False)
    if op.f('ix_analysis_requests_id') not in idx_names:
        op.create_index(op.f('ix_analysis_requests_id'), 'analysis_requests', ['id'], unique=False)
    op.create_foreign_key('repository_analyses_ibfk_1', 'repository_analyses', 'analysis_requests', ['analysis_id'], ['analysis_id'])
    # development_standards 테이블이 이미 존재하면 생성 스킵
    if not sa.inspect(conn).has_table('development_standards'):
        try:
            # op.create_table('development_standards',
            # sa.Column('id', sa.Integer(), nullable=False),
            # sa.Column('analysis_id', sa.String(length=36, collation='utf8mb4_unicode_ci'), nullable=False),
            # sa.Column('standard_type', sa.Enum('CODING_STYLE', 'ARCHITECTURE_PATTERN', 'COMMON_FUNCTIONS', 'BEST_PRACTICES', name='standardtype'), nullable=False),
            # sa.Column('title', sa.String(length=500), nullable=False),
            # sa.Column('content', sa.Text(), nullable=False),
            # sa.Column('examples', sa.JSON(), nullable=True),
            # sa.Column('recommendations', sa.JSON(), nullable=True),
            # sa.Column('created_at', sa.DateTime(), nullable=True),
            # sa.Column('updated_at', sa.DateTime(), nullable=True),
            # sa.ForeignKeyConstraint(['analysis_id'], ['analysis_requests.analysis_id'], ),
            # sa.PrimaryKeyConstraint('id'),
            # mysql_collate='utf8mb4_unicode_ci',
            # mysql_default_charset='utf8mb4',
            # mysql_engine='InnoDB'
            # )
        except Exception:
            # FK 제약조건 생성 실패 시, FK 없이 테이블을 생성 (운영 안정성 우선)
            # op.create_table('development_standards',
            # sa.Column('id', sa.Integer(), nullable=False),
            # sa.Column('analysis_id', sa.String(length=36, collation='utf8mb4_unicode_ci'), nullable=False),
            # sa.Column('standard_type', sa.Enum('CODING_STYLE', 'ARCHITECTURE_PATTERN', 'COMMON_FUNCTIONS', 'BEST_PRACTICES', name='standardtype'), nullable=False),
            # sa.Column('title', sa.String(length=500), nullable=False),
            # sa.Column('content', sa.Text(), nullable=False),
            # sa.Column('examples', sa.JSON(), nullable=True),
            # sa.Column('recommendations', sa.JSON(), nullable=True),
            # sa.Column('created_at', sa.DateTime(), nullable=True),
            # sa.Column('updated_at', sa.DateTime(), nullable=True),
            # sa.PrimaryKeyConstraint('id'),
            # mysql_collate='utf8mb4_unicode_ci',
            # mysql_default_charset='utf8mb4',
            # mysql_engine='InnoDB'
            # )
    op.create_index(op.f('ix_development_standards_id'), 'development_standards', ['id'], unique=False)
    op.create_table('code_files',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repository_analysis_id', sa.Integer(), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('language', sa.String(length=50), nullable=True),
    sa.Column('complexity_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('last_modified', sa.DateTime(), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['repository_analysis_id'], ['repository_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_code_files_id'), 'code_files', ['id'], unique=False)
    op.create_table('correlation_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('analysis_id', sa.String(length=36), nullable=False),
    sa.Column('repository1_id', sa.Integer(), nullable=False),
    sa.Column('repository2_id', sa.Integer(), nullable=False),
    sa.Column('common_dependencies', sa.JSON(), nullable=True),
    sa.Column('similar_patterns', sa.JSON(), nullable=True),
    sa.Column('architecture_similarity', sa.DECIMAL(precision=5, scale=4), nullable=True),
    sa.Column('shared_technologies', sa.JSON(), nullable=True),
    sa.Column('similarity_score', sa.DECIMAL(precision=5, scale=4), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['analysis_id'], ['analysis_requests.analysis_id'], ),
    sa.ForeignKeyConstraint(['repository1_id'], ['repository_analyses.id'], ),
    sa.ForeignKeyConstraint(['repository2_id'], ['repository_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_correlation_analyses_id'), 'correlation_analyses', ['id'], unique=False)
    op.create_table('document_analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repository_analysis_id', sa.Integer(), nullable=False),
    sa.Column('document_path', sa.String(length=1000), nullable=False),
    sa.Column('document_type', sa.Enum('README', 'API_DOC', 'WIKI', 'CHANGELOG', 'CONTRIBUTING', 'OTHER', name='documenttype'), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('extracted_sections', sa.JSON(), nullable=True),
    sa.Column('code_examples', sa.JSON(), nullable=True),
    sa.Column('api_endpoints', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['repository_analysis_id'], ['repository_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_analyses_id'), 'document_analyses', ['id'], unique=False)
    op.create_table('tech_dependencies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repository_analysis_id', sa.Integer(), nullable=False),
    sa.Column('dependency_type', sa.Enum('FRAMEWORK', 'LIBRARY', 'TOOL', 'LANGUAGE', name='dependencytype'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('version', sa.String(length=100), nullable=True),
    sa.Column('package_manager', sa.String(length=50), nullable=True),
    sa.Column('is_dev_dependency', sa.Boolean(), nullable=True),
    sa.Column('license', sa.String(length=100), nullable=True),
    sa.Column('vulnerability_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['repository_analysis_id'], ['repository_analyses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tech_dependencies_id'), 'tech_dependencies', ['id'], unique=False)
    op.create_table('ast_nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code_file_id', sa.Integer(), nullable=False),
    sa.Column('node_type', sa.String(length=100), nullable=False),
    sa.Column('node_name', sa.String(length=255), nullable=True),
    sa.Column('line_start', sa.Integer(), nullable=True),
    sa.Column('line_end', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('node_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['code_file_id'], ['code_files.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['ast_nodes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ast_nodes_id'), 'ast_nodes', ['id'], unique=False)
    op.drop_index('ix_langflow_tool_mappings_id', table_name='langflow_tool_mappings')
    op.drop_index('ix_langflow_tool_mappings_tool_contexts', table_name='langflow_tool_mappings')
    op.drop_table('langflow_tool_mappings')
    op.drop_index('ix_chat_messages_id', table_name='chat_messages')
    op.drop_table('chat_messages')
    op.drop_index('ix_langflows_flow_id', table_name='langflows')
    op.drop_index('ix_langflows_id', table_name='langflows')
    op.drop_index('ix_langflows_name', table_name='langflows')
    op.drop_table('langflows')
    op.drop_index('idx_version', table_name='schema_migrations')
    op.drop_index('version', table_name='schema_migrations')
    op.drop_table('schema_migrations')
    op.drop_index('ix_api_logs_id', table_name='api_logs')
    op.drop_table('api_logs')
    op.drop_table('conversation_summaries')
    
    op.alter_column('rag_analysis_results', 'status',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='analysisstatus'),
               nullable=True)
    op.alter_column('rag_analysis_results', 'repositories_data',
               existing_type=mysql.MEDIUMTEXT(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('rag_analysis_results', 'correlation_data',
               existing_type=mysql.MEDIUMTEXT(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('rag_analysis_results', 'tech_specs_summary',
               existing_type=mysql.MEDIUMTEXT(),
               type_=sa.Text(),
               existing_nullable=True)
    # rag_analysis_results 인덱스도 방어적으로 제거
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS analysis_id ON rag_analysis_results")
    except Exception:
        pass
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS idx_analysis_id ON rag_analysis_results")
    except Exception:
        pass
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS idx_git_url ON rag_analysis_results")
    except Exception:
        pass
    rag_idx_names = {idx['name'] for idx in sa.inspect(conn).get_indexes('rag_analysis_results')}
    if op.f('ix_rag_analysis_results_analysis_id') not in rag_idx_names:
        op.create_index(op.f('ix_rag_analysis_results_analysis_id'), 'rag_analysis_results', ['analysis_id'], unique=True)
    if op.f('ix_rag_analysis_results_git_url') not in rag_idx_names:
        op.create_index(op.f('ix_rag_analysis_results_git_url'), 'rag_analysis_results', ['git_url'], unique=False)
    if op.f('ix_rag_analysis_results_id') not in rag_idx_names:
        op.create_index(op.f('ix_rag_analysis_results_id'), 'rag_analysis_results', ['id'], unique=False)
    op.alter_column('repository_analyses', 'status',
               existing_type=mysql.VARCHAR(length=50),
               type_=sa.Enum('PENDING', 'CLONING', 'ANALYZING', 'COMPLETED', 'FAILED', name='repositorystatus'),
               existing_nullable=True,
               existing_server_default=sa.text("'PENDING'"))
    op.alter_column('repository_analyses', 'commit_message',
               existing_type=mysql.MEDIUMTEXT(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('repository_analyses', 'ast_data',
               existing_type=mysql.MEDIUMTEXT(),
               type_=sa.Text(),
               existing_nullable=True)
    # repository_analyses 인덱스 제거도 방어적으로 처리
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS idx_commit_hash ON repository_analyses")
    except Exception:
        pass
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS idx_repo_analysis_id ON repository_analyses")
    except Exception:
        pass
    try:
        conn.exec_driver_sql("DROP INDEX IF EXISTS idx_repository_url ON repository_analyses")
    except Exception:
        pass
    repo_idx_names = {idx['name'] for idx in sa.inspect(conn).get_indexes('repository_analyses')}
    if op.f('ix_repository_analyses_commit_hash') not in repo_idx_names:
        op.create_index(op.f('ix_repository_analyses_commit_hash'), 'repository_analyses', ['commit_hash'], unique=False)
    if op.f('ix_repository_analyses_id') not in repo_idx_names:
        op.create_index(op.f('ix_repository_analyses_id'), 'repository_analyses', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_repository_analyses_id'), table_name='repository_analyses')
    op.drop_index(op.f('ix_repository_analyses_commit_hash'), table_name='repository_analyses')
    op.create_index('idx_repository_url', 'repository_analyses', ['repository_url'], unique=False)
    op.create_index('idx_repo_analysis_id', 'repository_analyses', ['analysis_id'], unique=False)
    op.create_index('idx_commit_hash', 'repository_analyses', ['commit_hash'], unique=False)
    op.alter_column('repository_analyses', 'ast_data',
               existing_type=sa.Text(),
               type_=mysql.MEDIUMTEXT(),
               existing_nullable=True)
    op.alter_column('repository_analyses', 'commit_message',
               existing_type=sa.Text(),
               type_=mysql.MEDIUMTEXT(),
               existing_nullable=True)
    op.alter_column('repository_analyses', 'status',
               existing_type=sa.Enum('PENDING', 'CLONING', 'ANALYZING', 'COMPLETED', 'FAILED', name='repositorystatus'),
               type_=mysql.VARCHAR(length=50),
               existing_nullable=True,
               existing_server_default=sa.text("'PENDING'"))
    op.drop_index(op.f('ix_rag_analysis_results_id'), table_name='rag_analysis_results')
    op.drop_index(op.f('ix_rag_analysis_results_git_url'), table_name='rag_analysis_results')
    op.drop_index(op.f('ix_rag_analysis_results_analysis_id'), table_name='rag_analysis_results')
    op.create_index('idx_git_url', 'rag_analysis_results', ['git_url'], unique=False)
    op.create_index('idx_analysis_id', 'rag_analysis_results', ['analysis_id'], unique=False)
    op.create_index('analysis_id', 'rag_analysis_results', ['analysis_id'], unique=True)
    op.alter_column('rag_analysis_results', 'tech_specs_summary',
               existing_type=sa.Text(),
               type_=mysql.MEDIUMTEXT(),
               existing_nullable=True)
    op.alter_column('rag_analysis_results', 'correlation_data',
               existing_type=sa.Text(),
               type_=mysql.MEDIUMTEXT(),
               existing_nullable=True)
    op.alter_column('rag_analysis_results', 'repositories_data',
               existing_type=sa.Text(),
               type_=mysql.MEDIUMTEXT(),
               existing_nullable=True)
    op.alter_column('rag_analysis_results', 'status',
               existing_type=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='analysisstatus'),
               type_=mysql.VARCHAR(length=50),
               nullable=False)
    op.drop_index(op.f('ix_analysis_requests_id'), table_name='analysis_requests')
    op.drop_index(op.f('ix_analysis_requests_group_name'), table_name='analysis_requests')
    op.drop_index(op.f('ix_analysis_requests_analysis_id'), table_name='analysis_requests')
    op.create_index('analysis_id', 'analysis_requests', ['analysis_id'], unique=True)
    op.alter_column('analysis_requests', 'updated_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('analysis_requests', 'created_at',
               existing_type=mysql.DATETIME(),
               nullable=False)
    op.alter_column('analysis_requests', 'include_correlation',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('analysis_requests', 'include_tech_spec',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('analysis_requests', 'include_ast',
               existing_type=mysql.TINYINT(display_width=1),
               nullable=False)
    op.alter_column('analysis_requests', 'repositories',
               existing_type=mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'),
               nullable=True)
    op.alter_column('analysis_requests', 'status',
               existing_type=sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='analysisstatus'),
               type_=mysql.VARCHAR(length=50),
               nullable=False)
    op.alter_column('analysis_requests', 'analysis_id',
               existing_type=sa.String(length=36),
               type_=mysql.VARCHAR(length=255),
               existing_nullable=False)
    op.create_table('conversation_summaries',
    sa.Column('conversation_id', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('summary', mysql.TEXT(), nullable=False),
    sa.Column('created_at', mysql.DATETIME(), nullable=False),
    sa.Column('updated_at', mysql.DATETIME(), nullable=False),
    sa.Column('group_name', mysql.VARCHAR(length=255), nullable=True),
    sa.PrimaryKeyConstraint('conversation_id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('api_logs',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('session_id', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('endpoint', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('method', mysql.ENUM('GET', 'POST', 'PUT', 'DELETE', 'PATCH'), nullable=False),
    sa.Column('request_data', mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'), nullable=True),
    sa.Column('response_status', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('error_message', mysql.TEXT(), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('selected_tool', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('tool_execution_time_ms', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('tool_success', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.Column('tool_error_message', mysql.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_uca1400_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('ix_api_logs_id', 'api_logs', ['id'], unique=False)
    op.create_table('schema_migrations',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('version', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('description', mysql.TEXT(), nullable=True),
    sa.Column('executed_at', mysql.DATETIME(), server_default=sa.text('current_timestamp()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_unicode_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('version', 'schema_migrations', ['version'], unique=True)
    op.create_index('idx_version', 'schema_migrations', ['version'], unique=False)
    op.create_table('langflows',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('flow_id', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('name', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('description', mysql.TEXT(), nullable=True),
    sa.Column('flow_data', mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'), nullable=False),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.Column('is_active', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_uca1400_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('ix_langflows_name', 'langflows', ['name'], unique=True)
    op.create_index('ix_langflows_id', 'langflows', ['id'], unique=False)
    op.create_index('ix_langflows_flow_id', 'langflows', ['flow_id'], unique=True)
    op.create_table('chat_messages',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('session_id', mysql.VARCHAR(length=100), nullable=False),
    sa.Column('role', mysql.VARCHAR(length=50), nullable=False),
    sa.Column('content', mysql.TEXT(), nullable=False),
    sa.Column('timestamp', mysql.DATETIME(), nullable=True),
    sa.Column('turn_number', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    sa.Column('selected_tool', mysql.VARCHAR(length=100), nullable=True),
    sa.Column('tool_execution_time_ms', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    sa.Column('tool_success', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.Column('tool_metadata', mysql.LONGTEXT(charset='utf8mb4', collation='utf8mb4_bin'), nullable=True),
    sa.Column('tool_call_id', mysql.VARCHAR(length=255), nullable=True),
    sa.Column('tool_name', mysql.VARCHAR(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_uca1400_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('ix_chat_messages_id', 'chat_messages', ['id'], unique=False)
    op.create_table('langflow_tool_mappings',
    sa.Column('id', mysql.INTEGER(display_width=11), autoincrement=True, nullable=False),
    sa.Column('flow_id', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('context', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('description', mysql.TEXT(), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['flow_id'], ['langflows.flow_id'], name='langflow_tool_mappings_ibfk_1'),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_uca1400_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index('ix_langflow_tool_mappings_tool_contexts', 'langflow_tool_mappings', ['context'], unique=True)
    op.create_index('ix_langflow_tool_mappings_id', 'langflow_tool_mappings', ['id'], unique=False)
    op.drop_index(op.f('ix_ast_nodes_id'), table_name='ast_nodes')
    op.drop_table('ast_nodes')
    op.drop_index(op.f('ix_tech_dependencies_id'), table_name='tech_dependencies')
    op.drop_table('tech_dependencies')
    op.drop_index(op.f('ix_document_analyses_id'), table_name='document_analyses')
    op.drop_table('document_analyses')
    op.drop_index(op.f('ix_correlation_analyses_id'), table_name='correlation_analyses')
    op.drop_table('correlation_analyses')
    op.drop_index(op.f('ix_code_files_id'), table_name='code_files')
    op.drop_table('code_files')
    op.drop_index(op.f('ix_development_standards_id'), table_name='development_standards')
    # op.drop_table('development_standards')
    op.drop_index(op.f('ix_vector_embeddings_id'), table_name='vector_embeddings')
    op.drop_table('vector_embeddings')
    # ### end Alembic commands ###
